//============================================================================
// Name        : DrawMandelbrot.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <complex>
#include "Screen.h"
#include <SDL.h>

int main() {

	enum{ Width = 1280, Height = 720 };

	// Initialise screen
	Screen screen(Width, Height);
	if (screen.init() == false) {
		std::cerr << "ERROR INITIALIZING SCREEN WITH SDL.\n";
	}

	enum{ PaletteSize = 64 };
	int palette[PaletteSize + 1][3];
	for (int i = 0; i <= PaletteSize; ++i) {

		palette[i][0] = i < 2 * PaletteSize / 3 ? i * 255 * 3 / (2 * PaletteSize) : 255;
		palette[i][1] = i < PaletteSize / 3 ? 0 : (i - PaletteSize / 3) * 255 * 3 / (2 * PaletteSize);
		//palette[i][2] = i < 2 / PaletteSize / 3 ? 0 : (i - 2 * PaletteSize / 3) * 255 / (PaletteSize / 3);
		palette[i][2] = 0;


		//palette[i][0] = i * 255 / PaletteSize;
		//palette[i][1] = i * 255 / PaletteSize;
		//palette[i][2] = i * 255 / PaletteSize;
	}

	while (true) {

		for (int y = 0; y < Height; ++y) {
			for (int x = 0; x < Width; ++x) {
				std::complex<double> c ( (1.0 * (x - (Width - Height) / 2) / Height * 4.0 - 2.0), 1.0 * y / Height * 4.0 - 2.0);
				std::complex<double> z (0.0, 0.0);

				int iterations = 0;
				while (iterations < PaletteSize){
					z = z * z + c;

					if(abs(z) > 2.0)
						break;

					++iterations;
				}

				screen.setPixel(x, y, palette[iterations][0], palette[iterations][1], palette[iterations][2]);
				//screen.setPixel(x, y, iterations, iterations, iterations);

			}
		}

		// Draw the screen
		screen.update();

		// Check for messages/events
		if(screen.proccessEvents() == false){
			break;
		}

	}

	screen.close();

	return 0;
}
