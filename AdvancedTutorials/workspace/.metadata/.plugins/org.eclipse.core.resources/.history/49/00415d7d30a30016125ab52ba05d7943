/*
 * ring.h
 *
 *  Created on: 5 Nov 2016
 *      Author: GeorgeQuentin
 */

#ifndef RING_H_
#define RING_H_

template<class T>

class ring {
private:
	int initial_size;
public:

	ring();
	ring(int initial_size);
	int size() const;
	void clear();
	T & operator[](int index) const
	T & operator[](int index) const; // & the Bad
	T & front() {
		return operator[](0);
	}
	const T & front() const {
		return operator[](0);
	}
	T & back() {
		return operator[](size() - 1);
	}
	const T & back() const {
		return operator[](size() - 1);
	}
	void add(const T & x);
	void pop();

	virtual ~ring();
};

#endif /* RING_H_ */
