//============================================================================
// Name        : StacksAndQueues.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <stack>
#include <queue>

using namespace std;

class Test {
private:
	int id;
	string name;

public:

	Test() : id(0), name("") {}

	Test(int id, string name) : id(id), name(name) {}

	~Test()  {
		cout << "Destroyed Object" << endl;
	}

	void print() const {
		cout << name << ": " << id << endl;
	}

	bool operator<(const Test &other) const {
		return name < other.name;
	}
};


int main() {

	//STACK: LAST IN FIRST OUT
	//you can use what ever you like in a stack, just like the other containers
	//a stack in a last in, first out structure, it is called a stack meaning a pile of objects
	//a stack is like a pile of object, i.e a stack of plates for example, you can add to it at the top and do the same when you want to remove
	//so the previous element added in the stack is going to be the one to be removed first
	stack<Test> testStack;

	//you add items by pushing them in the stack
	testStack.push(Test(15, "Lola"));
	testStack.push(Test(23, "Sue"));

	//there is no way of iterating through a stack, if you think you need to iterate through it then do not use it

	return 0;
}
