//============================================================================
// Name        : FractalCreatorWithWindow.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <SDL.h>
#include "Screen.h"
#include <sstream>
#include "FractalGenerator.h"

using namespace std;
using namespace bitmaptutorial;
using namespace screennamespace;

int main() {


//	FractalGenerator fractalGenerator(800, 600);
//
//	fractalGenerator.addRange(0.0, RGB(0, 0, 255) );
//	fractalGenerator.addRange(0.3, RGB(255, 255, 0) );
//	fractalGenerator.addRange(0.5, RGB(0, 255, 0) );
//	fractalGenerator.addRange(1.0, RGB(0, 0, 255) );
//
//	fractalGenerator.addZoom( Zoom(295, 202, 0.1) );
//	fractalGenerator.addZoom( Zoom(312, 304, 0.1) );
//	fractalGenerator.run("test.bmp");
//
//	cout << "Finished" << endl;


	int mouseX;
	int mouseY;


	// Initialise screen
	Screen screen;
	if (screen.init() == false) {
		cout << "ERROR INITIALIZING SCREEN WITH SDL." << endl;
	}
	cout << "SDL Init succeeded." << endl;

	float redTime = 0.0006;
	float greenTime = 0.00007;
	float blueTime = 0.00002;

	SDL_PumpEvents();

	bool running = true;

	while (running) {

		if (SDL_GetMouseState(&mouseX, &mouseY) & SDL_BUTTON(SDL_BUTTON_LEFT)) {
			cout << "x: " << mouseX << endl;
			cout << "y: " << mouseY << endl;
		}


		// Fill Screen
		for(int y=0; y < Screen::SCREEN_HEIGHT; y++){
			for(int x=0; x < Screen::SCREEN_WIDTH; x++){

				screen.setPixel(x, y, 0, 255, 255);
			}
		}

		// Blur screen
		//screen.boxBlur();

		// Draw the screen
		screen.update();

		// Check for messages/events
		if(screen.proccessEvents() == false){
			running = false;
			break;
		}

	}

	screen.close();


	return 0;
}
