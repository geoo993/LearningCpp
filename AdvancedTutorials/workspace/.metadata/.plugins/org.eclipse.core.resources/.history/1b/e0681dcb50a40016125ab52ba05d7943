//============================================================================
// Name        : UniquePointer.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <memory>//if you want to use any kind of smart pointer you have to include this
using namespace std;


//unique pointer are kind of smart pointer, behaves like normal pointer except they handle the deallocation of memory for you
//memory leaks are a common problem in c++ program because you do not get enough deletes being called or the right type of deletes for the object you've allocated with new and smart pointer are the one that can help to handle deallocation of memory and avoiding those bugs
class Test {
public:
	Test(){
		cout << "Constructor to create" << endl;
	}

	void print(){
		cout << "Hello World!" << endl;
	}


	~Test(){
		cout << "Destructor to destroy" << endl;
	}
};

int main() {

	//unique_ptr is the smart pointer, which is is a template type
	//unique_ptr knows that it is a pointer, it just needs the type that it is going to point at
	//to make use of this smart pointer unique_ptr, you have to include memory header
	unique_ptr<int> pInt(new int);// you have to do the memory allocation by passing the value of the pointer
	*pInt = 9;//here we are dereferencing the pointer and the smart pointer will deallocate the memory we allocated
	cout << *pInt << endl;


	//using brackets to keep the element within a scope
	{
	//this test test shows how the memory is deallocated
	unique_ptr<Test> pTest(new Test);//here we are allocating memory, this works just like a normal pointer
	pTest->print();
	}

	cout << "Finished" << endl;

	return 0;
}
