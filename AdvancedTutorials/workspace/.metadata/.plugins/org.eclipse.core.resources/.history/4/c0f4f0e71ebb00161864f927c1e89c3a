/*
 * FractalGenerator.cpp
 *
 *  Created on: 5 Dec 2016
 *      Author: GeorgeQuentin
 */

#include "FractalGenerator.h"

namespace bitmaptutorial {

FractalGenerator::FractalGenerator(int width, int height):
		m_width(width),
		m_height(height),
		m_histogram(new int[Mandelbrot::MAX_ITERATIONS]{0}),
		m_fractal(new int[m_width * m_height]{0}),
		m_bitmap(m_width, m_height),
		m_zoomList(m_width, m_height)
		{

	m_zoomList.add( Zoom(m_width/2, m_height/2, SCALE/m_width) );

}

void FractalGenerator::calculateIterations(){

	for (int y = 0; y < m_height; y++){

		for (int x = 0; x < m_width; x++){

			//offsets are always done via addition and subtraction but scaling on the other means scale the coordinate system which is done via multiplication or division
			//double xFractal = (x - WIDTH/2 - DIFFERENCE) * 2.0/HEIGHT;// now the x will range from -400 as min to 400 as max
			//double yFractal = (y - HEIGHT/2) * 2.0/HEIGHT;
			//int iterations = Mandelbrot::getIterations(xFractal, yFractal);

			pair <double, double> coords = m_zoomlist.doZoom(x, y);
			int iterations = Mandelbrot::getIterations(coords.first, coords.second);

			//the coordinate system of the bitmap starts at the bottom left corner, so we iterate by going from y*WIDTH +x, x goes from left to right
			m_fractal[y * m_width + x] = iterations;

			if (iterations != Mandelbrot::MAX_ITERATIONS){
				m_histogram[iterations]++;
			}

		}
	}

}

void FractalGenerator::drawFractal(){

	for (int y = 0; y < m_height; y++){

		for (int x = 0; x < m_width; x++){

			uint8_t red = 0;
			uint8_t green = 0;
			uint8_t blue = 0;

			int iterations = m_fractal[y * m_width + x]  ;

//			uint8_t color = (uint8_t)(256 * (double)iterations/Mandelbrot::MAX_ITERATIONS);
			//Google Mandelbrot histogram colouring for more info
			//color = color * color * color * color;

			if (iterations != Mandelbrot::MAX_ITERATIONS) {
				double hue = 0.0;
				for (int i = 0; i <= iterations; i++){
					hue += (double)m_histogram[i]/total;
				}

				green = hue * 255;//pow( 255, hue );
			}


			m_bitmap.setPixel(x, y, red, green, blue);

		}
	}


}

void FractalGenerator::addZoom(const Zoom& zoom){
	m_zoomList.add(zoom);

}

void FractalGenerator::writeBitmap(string name){

}

FractalGenerator::~FractalGenerator() {
	// TODO Auto-generated destructor stub
}

}
