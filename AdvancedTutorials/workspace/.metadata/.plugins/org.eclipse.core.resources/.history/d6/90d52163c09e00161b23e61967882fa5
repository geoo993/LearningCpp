//============================================================================
// Name        : OverloadingTheAssignmentOperator.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;


class Test {
private:
	int id;
	string name;

public:

	Test() :
		id(0), name("") {
	}

	Test(int id, string name) :
		id(id), name(name) {
	}

	~Test() {
		//cout << "Destroyed Object" << endl;
	}

	void print() const {
		cout << name << ": " << id << endl;
	}

//	bool operator<(const Test &other) const {
//
//		if (name == other.name) {
//			return id < other.id;
//		} else {
//			return name < other.name;
//		}
//	}
	//friend bool comp(const Test &a, const Test &b);


	//creating a binary operator, for operator you use the operator key word
	const Test &operator=(const Test &other){

		cout << "Assignment running" << endl;
		id = other.id;
		name = other.name;

		return *this;
	}

};


//bool comp(const Test &a, const Test &b){
//	return a.name < b.name;
//}




int main() {


	Test test1(12, "Mike");
	test1.print();

	//c++ provides a default implementation of something that causes an object to be overridden by another object just like we see here
	Test test2(31, "Bob");
	test2 = test1;
	test2.print();


	//this is like method chaining
	Test test3;
	test3 = test2 = test1;
	test3.operator=(test2);//this is equivalent to (test3 = test2)
	test2.print();


	//sometimes its best to override rather than doing a shallow copy of an object and to do that by overriding the operator, creating a binary operator in the class



	return 0;
}



