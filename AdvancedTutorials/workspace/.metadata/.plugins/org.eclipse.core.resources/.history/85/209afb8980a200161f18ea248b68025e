//============================================================================
// Name        : FunctionPointers.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
using namespace std;

//function pointers have been around for a long time
//in c++ 11, you can use lambda expressions as alternative to function pointers
//same way you can declare pointer to a variable, you can also do the same for functions, so you can actually pass a block of code to another function
//the virtual keyword is an example of an already created function, the virtual keyword is an instruction to call c++ to create a v table (virtual table), which is a table of function pointers
// virtual key word sends the instruction or call to the parent class function type, so when you call a method from a child class that uses virtual or via pointer to the parent call type, c++ can do a look up on table of functions pointer and find the right appropriate function to call


void test(){
	cout << "Hello " << endl;
}



int main() {
	test();


	// when we create the type of the variable of the actual pointer to a function, we are not going to need a function name in there
	// we are just going to need a pointer, something that points to the function
	// in the case or void return type like the test function above, we will need to use the return type of it to create the function pointer


	return 0;
}
