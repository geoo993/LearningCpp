//============================================================================
// Name        : TestExamPapers.cpp
// Author      : 
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <vector>
#include <initializer_list>
#include <list>
using namespace std;

/*
class Time {

public:
	Time(){}

	Time(const Time &other) {
		*this = other;
	}

	const Time &operator=(const Time &other) {
		*this = other;
		return *this;
	}

	friend ostream &operator>>(ostream &out, const Time &test) {
		return out;
	}

	friend ostream &operator<<(ostream &out, const Time &test) {
		//out << "(" << c.getReal() << "," << c.getImaginary() << ")";
		return out;
	}

	virtual bool comp(const Time &a, const Time &b){};
	virtual bool operator==(const Time &other) const{};
	virtual bool operator!=(const Time &other) const{};
	virtual bool operator<(const Time &other) const{};
	virtual bool operator>(const Time &other) const{};
};

class Appointment: public Time {

	string description;
	Time startTime;
	Time endTime;
public:

	Appointment(){};
	Appointment(string description, Time startTime, Time endTime) : description(description), startTime(startTime), endTime(endTime) {};
	Appointment(const Appointment &other) {
		*this = other;
	}

	const Appointment &operator=(const Appointment &other) {
		description = other.description;
		startTime = other.startTime;
		endTime = other.endTime;
		return *this;
	}

	bool comp(const Time &a, const Time &b) {
		return (a == b);
	}

	bool operator==(const Time &other) const {
		return  (*this == other) ;

	}
	bool operator!=(const Time &other) const {
		//return  (real != other.real) && (imaginary != other.imaginary);
		return !(*this==other);
	}

	bool operator<(const Time &other) const {
		return (*this < other);
	}

	bool operator>(const Time &other) const {
		return (*this > other);
	}

	void printAppointments(){
		cout << "startTime: " << startTime << ", endTime: " << endTime << endl;
	}

};

class Diary: public Appointment {

	vector<Appointment> appointments{};

public :
	Diary(): appointments({}) {}

	Diary(const Diary &other) {
		*this = other;
	}

	const Diary &operator=(const Diary &other) {
		appointments = other.appointments;
		return *this;
	}

	Diary(initializer_list<Appointment> appointment){
		for(auto app: appointment){
			appointments.push_back(app);
		}
	}
	void AddAppointment(Appointment appointment) {
		appointments.push_back(appointment);
	}

	unsigned int NumberOfAppointments() const {
		return appointments.size();
	}

	void print(){
		for (vector<Appointment>::iterator it = appointments.begin(); it != appointments.end(); it++ ){
				cout << *it << endl;
		}
	}

};

int main() {

	//because time is first object created it will then need to go back up the class heirachy to initialise its base classes Time and Appointment.
	//Appointment is derived class of the Time class and, Diary is the derived class of Apppointment. So Diary d1; will its default constructor of which will then attempt to call and initialise it base class Appointment default constructor.
	//the time class gets declared, its default construtor is created,

	return 0;
}

*/


//this is an pure virtual method, it means that it's implementation can be created by any derided classes of this class. it means that this class is an abstract class. it is a class that cannot be instantiated. it is a class which must be overridden by any (non-abstract) derived class

double addingDoubles (list<double> & myList){
	double result = 0.0;

	for( auto value: myList){
		result = result + value;
	}
	return result;
}

template < typename T, typename D>
D twoIts(T &it1, T &it2, list<D> & myList){
	D part1;
	D part2;

	for ( it1 = myList.begin(); it1 != myList.end(); it1++ ){
		part1 = part1 + *it1;

		for ( it2 = myList.begin(); it2 != myList.end(); it2++ ){
					cout << *it2 << endl;
					part2 = part1 + part2 + *it2;
//					var dx:Number = x1-x2;
//					var dy:Number = y1-y2;
//			return Math.sqrt(dx * dx + dy * dy);

		}
	}
	return (part1 - part2);
}

int main() {

	list <double> myList = { 0.5, 0.3, 2.1, 5.2};
	double res = addingDoubles(myList);

//	for (vector<double>::iterator it1 = myList.begin(); it1 != myList.end(); it1++ ){
//			cout << *it1 << endl;
//		for (vector<double>::iterator it2 = myList.begin(); it2 != myList.end(); it2++ ){
//				cout << *it2 << endl;
//
//				var dx:Number = x1-x2;
//				var dy:Number = y1-y2;
//				return Math.sqrt(dx * dx + dy * dy);
//
//		}
//	}


	cout << res << endl;

	return 0;
}

